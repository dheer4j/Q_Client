{"ast":null,"code":"import axios from 'axios';\n\n// Use a constant for the API URL since we're in development mode\nconst API_URL = 'http://localhost:8080/api';\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('authToken', response.data.token);\n      localStorage.setItem('userData', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Login failed');\n    }\n    throw new Error('Network error. Please try again.');\n  }\n};\nexport const register = async (username, email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      username,\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('authToken', response.data.token);\n      localStorage.setItem('userData', JSON.stringify(response.data.user));\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Registration failed');\n    }\n    throw new Error('Network error. Please try again.');\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('userData');\n};\nexport const getCurrentUser = () => {\n  const userData = localStorage.getItem('userData');\n  return userData ? JSON.parse(userData) : null;\n};\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('authToken');\n};\n\n// For demo/testing purposes\nexport const demoLogin = async (email, password) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Mock user data\n  const userData = {\n    id: '1',\n    username: email.split('@')[0],\n    email,\n    quantumKeyStatus: 'active'\n  };\n\n  // Store in localStorage\n  localStorage.setItem('authToken', 'demo-token');\n  localStorage.setItem('userData', JSON.stringify(userData));\n  return {\n    user: userData,\n    token: 'demo-token'\n  };\n};","map":{"version":3,"names":["axios","API_URL","login","email","password","response","post","data","token","localStorage","setItem","JSON","stringify","user","error","Error","message","register","username","logout","removeItem","getCurrentUser","userData","getItem","parse","isAuthenticated","demoLogin","Promise","resolve","setTimeout","id","split","quantumKeyStatus"],"sources":["/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\n\n// Use a constant for the API URL since we're in development mode\nconst API_URL = 'http://localhost:8080/api';\n\nexport const login = async (email: string, password: string) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/login`, { email, password });\n    \n    if (response.data.token) {\n      localStorage.setItem('authToken', response.data.token);\n      localStorage.setItem('userData', JSON.stringify(response.data.user));\n    }\n    \n    return response.data;\n  } catch (error: any) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Login failed');\n    }\n    throw new Error('Network error. Please try again.');\n  }\n};\n\nexport const register = async (username: string, email: string, password: string) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      username,\n      email,\n      password\n    });\n    \n    if (response.data.token) {\n      localStorage.setItem('authToken', response.data.token);\n      localStorage.setItem('userData', JSON.stringify(response.data.user));\n    }\n    \n    return response.data;\n  } catch (error: any) {\n    if (error.response) {\n      throw new Error(error.response.data.message || 'Registration failed');\n    }\n    throw new Error('Network error. Please try again.');\n  }\n};\n\nexport const logout = () => {\n  localStorage.removeItem('authToken');\n  localStorage.removeItem('userData');\n};\n\nexport const getCurrentUser = () => {\n  const userData = localStorage.getItem('userData');\n  return userData ? JSON.parse(userData) : null;\n};\n\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('authToken');\n};\n\n// For demo/testing purposes\nexport const demoLogin = async (email: string, password: string) => {\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  \n  // Mock user data\n  const userData = {\n    id: '1',\n    username: email.split('@')[0],\n    email,\n    quantumKeyStatus: 'active'\n  };\n  \n  // Store in localStorage\n  localStorage.setItem('authToken', 'demo-token');\n  localStorage.setItem('userData', JSON.stringify(userData));\n  \n  return { user: userData, token: 'demo-token' };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}