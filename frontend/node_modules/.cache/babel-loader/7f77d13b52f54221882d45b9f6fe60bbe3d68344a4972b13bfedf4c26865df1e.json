{"ast":null,"code":"var _jsxFileName = \"/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Sidebar from './components/Sidebar';\nimport EmailList from './components/EmailList';\nimport EmailDetail from './components/EmailDetail';\nimport ComposeEmail from './components/ComposeEmail';\nimport Login from './components/Login';\n\n// Define API endpoints\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8080/api';\nconst App = () => {\n  _s();\n  // Auth state\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // UI state\n  const [activeSection, setActiveSection] = useState('inbox');\n  const [showComposeModal, setShowComposeModal] = useState(false);\n  const [selectedEmail, setSelectedEmail] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Data state\n  const [inboxEmails, setInboxEmails] = useState([]);\n  const [sentEmails, setSentEmails] = useState([]);\n  const [draftEmails, setDraftEmails] = useState([]);\n  const [encryptedEmails, setEncryptedEmails] = useState([]);\n\n  // Get displayed emails based on active section\n  const getDisplayedEmails = () => {\n    switch (activeSection) {\n      case 'sent':\n        return sentEmails;\n      case 'drafts':\n        return draftEmails;\n      case 'encrypted':\n        return encryptedEmails;\n      case 'inbox':\n      default:\n        return inboxEmails;\n    }\n  };\n\n  // Handle login\n  const handleLogin = async (email, password) => {\n    try {\n      setLoading(true);\n      // In a real app, this would be an API call\n      // const response = await axios.post(`${API_BASE_URL}/auth/login`, { email, password });\n\n      // For demo purposes, we'll simulate a successful login\n      const mockUser = {\n        id: '1',\n        username: email.split('@')[0],\n        email: email\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setCurrentUser(mockUser);\n      setIsAuthenticated(true);\n      setLoading(false);\n\n      // Load emails after login\n      loadEmails();\n    } catch (err) {\n      setError('Login failed');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Load emails (would be API calls in a real app)\n  const loadEmails = async () => {\n    try {\n      setLoading(true);\n\n      // In a real app, these would be separate API calls\n      // const inboxResponse = await axios.get(`${API_BASE_URL}/emails/inbox`);\n      // const sentResponse = await axios.get(`${API_BASE_URL}/emails/sent`);\n\n      // For demo purposes, we'll create mock data\n      const mockInboxEmails = [{\n        id: '1',\n        sender: 'quantum.researcher@secure.net',\n        recipient: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || '',\n        subject: 'Quantum Key Exchange Proposal',\n        body: 'Hello,\\n\\nI would like to propose a new quantum key exchange protocol that builds on the existing Kyber implementation. Our research team has made significant progress in optimizing the algorithm for mobile devices.\\n\\nWould you be interested in collaborating on this project?\\n\\nBest regards,\\nQuantum Research Team',\n        encrypted: true,\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        // 2 hours ago\n        read: false\n      }, {\n        id: '2',\n        sender: 'admin@quantummail.com',\n        recipient: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || '',\n        subject: 'Welcome to Quantum Mail',\n        body: 'Welcome to Quantum Mail!\\n\\nWe are excited to have you on board. Our platform uses post-quantum cryptography to ensure your communications remain secure even against quantum computer attacks.\\n\\nIf you have any questions, please don\\'t hesitate to contact our support team.\\n\\nBest regards,\\nThe Quantum Mail Team',\n        encrypted: true,\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        // 1 day ago\n        read: true\n      }];\n      const mockSentEmails = [{\n        id: '3',\n        sender: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || '',\n        recipient: 'colleague@example.com',\n        subject: 'Project Update',\n        body: 'Hi there,\\n\\nJust wanted to give you a quick update on the project. We have implemented the new quantum-resistant algorithms and everything seems to be working well.\\n\\nLet me know if you have any questions.\\n\\nRegards,\\n' + ((currentUser === null || currentUser === void 0 ? void 0 : currentUser.username) || ''),\n        encrypted: true,\n        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n        // 12 hours ago\n        read: true\n      }];\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setInboxEmails(mockInboxEmails);\n      setSentEmails(mockSentEmails);\n      setEncryptedEmails([...mockInboxEmails, ...mockSentEmails].filter(email => email.encrypted));\n      setDraftEmails([]);\n      setError('');\n    } catch (err) {\n      setError('Failed to load emails');\n      console.error('Load emails failed:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle sending email\n  const handleSendEmail = async (recipient, subject, body, encrypted) => {\n    try {\n      setLoading(true);\n\n      // In a real app, this would be an API call\n      // const response = await axios.post(`${API_BASE_URL}/emails/send`, {\n      //   recipient,\n      //   subject,\n      //   body,\n      //   encrypted\n      // });\n\n      // For demo purposes, we'll create a mock sent email\n      const newEmail = {\n        id: Date.now().toString(),\n        sender: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.email) || '',\n        recipient,\n        subject,\n        body,\n        encrypted,\n        timestamp: new Date().toISOString(),\n        read: true\n      };\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Update sent emails\n      setSentEmails(prev => [newEmail, ...prev]);\n\n      // Update encrypted emails if applicable\n      if (encrypted) {\n        setEncryptedEmails(prev => [newEmail, ...prev]);\n      }\n      setError('');\n    } catch (err) {\n      setError('Failed to send email');\n      console.error('Send email failed:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle section change\n  const handleSectionChange = section => {\n    setActiveSection(section);\n    setSelectedEmail(null);\n  };\n\n  // Handle email selection\n  const handleSelectEmail = email => {\n    setSelectedEmail(email);\n\n    // Mark as read if it wasn't already\n    if (!email.read) {\n      // In a real app, this would be an API call to mark as read\n      // Update the email in the appropriate list\n      const updatedEmail = {\n        ...email,\n        read: true\n      };\n      if (activeSection === 'inbox') {\n        setInboxEmails(prev => prev.map(e => e.id === email.id ? updatedEmail : e));\n      } else if (activeSection === 'sent') {\n        setSentEmails(prev => prev.map(e => e.id === email.id ? updatedEmail : e));\n      } else if (activeSection === 'encrypted') {\n        setEncryptedEmails(prev => prev.map(e => e.id === email.id ? updatedEmail : e));\n      }\n    }\n  };\n\n  // Handle compose button click\n  const handleComposeClick = () => {\n    setShowComposeModal(true);\n  };\n\n  // Main app styles\n  const appStyle = {\n    display: 'flex',\n    height: '100vh',\n    width: '100%',\n    backgroundColor: '#131825',\n    color: 'white',\n    fontFamily: 'Arial, sans-serif'\n  };\n\n  // If not authenticated, show login screen\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: appStyle,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      activeSection: activeSection,\n      onSectionChange: handleSectionChange,\n      encryptionActive: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmailList, {\n      emails: getDisplayedEmails(),\n      onSelectEmail: handleSelectEmail,\n      selectedEmailId: (selectedEmail === null || selectedEmail === void 0 ? void 0 : selectedEmail.id) || null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmailDetail, {\n      email: selectedEmail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), showComposeModal && /*#__PURE__*/_jsxDEV(ComposeEmail, {\n      onClose: () => setShowComposeModal(false),\n      onSend: handleSendEmail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        bottom: '30px',\n        right: '30px',\n        backgroundColor: '#3b82f6',\n        color: 'white',\n        width: '60px',\n        height: '60px',\n        borderRadius: '50%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        boxShadow: '0 4px 10px rgba(0, 0, 0, 0.3)',\n        cursor: 'pointer',\n        fontSize: '24px',\n        zIndex: 100\n      },\n      onClick: handleComposeClick,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Pb2DnBrUVNTQPsP530cSNNwgMGc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Sidebar","EmailList","EmailDetail","ComposeEmail","Login","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","isAuthenticated","setIsAuthenticated","currentUser","setCurrentUser","activeSection","setActiveSection","showComposeModal","setShowComposeModal","selectedEmail","setSelectedEmail","loading","setLoading","error","setError","inboxEmails","setInboxEmails","sentEmails","setSentEmails","draftEmails","setDraftEmails","encryptedEmails","setEncryptedEmails","getDisplayedEmails","handleLogin","email","password","mockUser","id","username","split","Promise","resolve","setTimeout","loadEmails","err","mockInboxEmails","sender","recipient","subject","body","encrypted","timestamp","Date","now","toISOString","read","mockSentEmails","filter","console","handleSendEmail","newEmail","toString","prev","handleSectionChange","section","handleSelectEmail","updatedEmail","map","e","handleComposeClick","appStyle","display","height","width","backgroundColor","color","fontFamily","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","style","children","onSectionChange","encryptionActive","emails","onSelectEmail","selectedEmailId","onClose","onSend","position","bottom","right","borderRadius","justifyContent","alignItems","boxShadow","cursor","fontSize","zIndex","onClick","_c","$RefreshReg$"],"sources":["/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Sidebar from './components/Sidebar';\nimport EmailList, { Email } from './components/EmailList';\nimport EmailDetail from './components/EmailDetail';\nimport ComposeEmail from './components/ComposeEmail';\nimport Login from './components/Login';\n\n// Define API endpoints\nconst API_BASE_URL = 'http://localhost:8080/api';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n}\n\ninterface KeyPair {\n  id: string;\n  publicKey: string;\n  algorithm: string;\n  createdAt: string;\n}\n\nconst App: React.FC = () => {\n  // Auth state\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  \n  // UI state\n  const [activeSection, setActiveSection] = useState<string>('inbox');\n  const [showComposeModal, setShowComposeModal] = useState<boolean>(false);\n  const [selectedEmail, setSelectedEmail] = useState<Email | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  \n  // Data state\n  const [inboxEmails, setInboxEmails] = useState<Email[]>([]);\n  const [sentEmails, setSentEmails] = useState<Email[]>([]);\n  const [draftEmails, setDraftEmails] = useState<Email[]>([]);\n  const [encryptedEmails, setEncryptedEmails] = useState<Email[]>([]);\n  \n  // Get displayed emails based on active section\n  const getDisplayedEmails = (): Email[] => {\n    switch (activeSection) {\n      case 'sent':\n        return sentEmails;\n      case 'drafts':\n        return draftEmails;\n      case 'encrypted':\n        return encryptedEmails;\n      case 'inbox':\n      default:\n        return inboxEmails;\n    }\n  };\n  \n  // Handle login\n  const handleLogin = async (email: string, password: string) => {\n    try {\n      setLoading(true);\n      // In a real app, this would be an API call\n      // const response = await axios.post(`${API_BASE_URL}/auth/login`, { email, password });\n      \n      // For demo purposes, we'll simulate a successful login\n      const mockUser = {\n        id: '1',\n        username: email.split('@')[0],\n        email: email\n      };\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setCurrentUser(mockUser);\n      setIsAuthenticated(true);\n      setLoading(false);\n      \n      // Load emails after login\n      loadEmails();\n    } catch (err) {\n      setError('Login failed');\n      setLoading(false);\n      throw err;\n    }\n  };\n  \n  // Load emails (would be API calls in a real app)\n  const loadEmails = async () => {\n    try {\n      setLoading(true);\n      \n      // In a real app, these would be separate API calls\n      // const inboxResponse = await axios.get(`${API_BASE_URL}/emails/inbox`);\n      // const sentResponse = await axios.get(`${API_BASE_URL}/emails/sent`);\n      \n      // For demo purposes, we'll create mock data\n      const mockInboxEmails: Email[] = [\n        {\n          id: '1',\n          sender: 'quantum.researcher@secure.net',\n          recipient: currentUser?.email || '',\n          subject: 'Quantum Key Exchange Proposal',\n          body: 'Hello,\\n\\nI would like to propose a new quantum key exchange protocol that builds on the existing Kyber implementation. Our research team has made significant progress in optimizing the algorithm for mobile devices.\\n\\nWould you be interested in collaborating on this project?\\n\\nBest regards,\\nQuantum Research Team',\n          encrypted: true,\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 hours ago\n          read: false\n        },\n        {\n          id: '2',\n          sender: 'admin@quantummail.com',\n          recipient: currentUser?.email || '',\n          subject: 'Welcome to Quantum Mail',\n          body: 'Welcome to Quantum Mail!\\n\\nWe are excited to have you on board. Our platform uses post-quantum cryptography to ensure your communications remain secure even against quantum computer attacks.\\n\\nIf you have any questions, please don\\'t hesitate to contact our support team.\\n\\nBest regards,\\nThe Quantum Mail Team',\n          encrypted: true,\n          timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago\n          read: true\n        }\n      ];\n      \n      const mockSentEmails: Email[] = [\n        {\n          id: '3',\n          sender: currentUser?.email || '',\n          recipient: 'colleague@example.com',\n          subject: 'Project Update',\n          body: 'Hi there,\\n\\nJust wanted to give you a quick update on the project. We have implemented the new quantum-resistant algorithms and everything seems to be working well.\\n\\nLet me know if you have any questions.\\n\\nRegards,\\n' + (currentUser?.username || ''),\n          encrypted: true,\n          timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), // 12 hours ago\n          read: true\n        }\n      ];\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setInboxEmails(mockInboxEmails);\n      setSentEmails(mockSentEmails);\n      setEncryptedEmails([...mockInboxEmails, ...mockSentEmails].filter(email => email.encrypted));\n      setDraftEmails([]);\n      setError('');\n    } catch (err) {\n      setError('Failed to load emails');\n      console.error('Load emails failed:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle sending email\n  const handleSendEmail = async (recipient: string, subject: string, body: string, encrypted: boolean) => {\n    try {\n      setLoading(true);\n      \n      // In a real app, this would be an API call\n      // const response = await axios.post(`${API_BASE_URL}/emails/send`, {\n      //   recipient,\n      //   subject,\n      //   body,\n      //   encrypted\n      // });\n      \n      // For demo purposes, we'll create a mock sent email\n      const newEmail: Email = {\n        id: Date.now().toString(),\n        sender: currentUser?.email || '',\n        recipient,\n        subject,\n        body,\n        encrypted,\n        timestamp: new Date().toISOString(),\n        read: true\n      };\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Update sent emails\n      setSentEmails(prev => [newEmail, ...prev]);\n      \n      // Update encrypted emails if applicable\n      if (encrypted) {\n        setEncryptedEmails(prev => [newEmail, ...prev]);\n      }\n      \n      setError('');\n    } catch (err) {\n      setError('Failed to send email');\n      console.error('Send email failed:', err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle section change\n  const handleSectionChange = (section: string) => {\n    setActiveSection(section);\n    setSelectedEmail(null);\n  };\n  \n  // Handle email selection\n  const handleSelectEmail = (email: Email) => {\n    setSelectedEmail(email);\n    \n    // Mark as read if it wasn't already\n    if (!email.read) {\n      // In a real app, this would be an API call to mark as read\n      // Update the email in the appropriate list\n      const updatedEmail = { ...email, read: true };\n      \n      if (activeSection === 'inbox') {\n        setInboxEmails(prev => \n          prev.map(e => e.id === email.id ? updatedEmail : e)\n        );\n      } else if (activeSection === 'sent') {\n        setSentEmails(prev => \n          prev.map(e => e.id === email.id ? updatedEmail : e)\n        );\n      } else if (activeSection === 'encrypted') {\n        setEncryptedEmails(prev => \n          prev.map(e => e.id === email.id ? updatedEmail : e)\n        );\n      }\n    }\n  };\n  \n  // Handle compose button click\n  const handleComposeClick = () => {\n    setShowComposeModal(true);\n  };\n  \n  // Main app styles\n  const appStyle: React.CSSProperties = {\n    display: 'flex',\n    height: '100vh',\n    width: '100%',\n    backgroundColor: '#131825',\n    color: 'white',\n    fontFamily: 'Arial, sans-serif'\n  };\n  \n  // If not authenticated, show login screen\n  if (!isAuthenticated) {\n    return <Login onLogin={handleLogin} />;\n  }\n  \n  return (\n    <div style={appStyle}>\n      {/* Sidebar */}\n      <Sidebar \n        activeSection={activeSection} \n        onSectionChange={handleSectionChange}\n        encryptionActive={true}\n      />\n      \n      {/* Email List */}\n      <EmailList \n        emails={getDisplayedEmails()} \n        onSelectEmail={handleSelectEmail}\n        selectedEmailId={selectedEmail?.id || null}\n      />\n      \n      {/* Email Detail */}\n      <EmailDetail email={selectedEmail} />\n      \n      {/* Compose Email Modal */}\n      {showComposeModal && (\n        <ComposeEmail \n          onClose={() => setShowComposeModal(false)}\n          onSend={handleSendEmail}\n        />\n      )}\n      \n      {/* Floating Compose Button */}\n      <div \n        style={{\n          position: 'fixed',\n          bottom: '30px',\n          right: '30px',\n          backgroundColor: '#3b82f6',\n          color: 'white',\n          width: '60px',\n          height: '60px',\n          borderRadius: '50%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          boxShadow: '0 4px 10px rgba(0, 0, 0, 0.3)',\n          cursor: 'pointer',\n          fontSize: '24px',\n          zIndex: 100\n        }}\n        onClick={handleComposeClick}\n      >\n        +\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}