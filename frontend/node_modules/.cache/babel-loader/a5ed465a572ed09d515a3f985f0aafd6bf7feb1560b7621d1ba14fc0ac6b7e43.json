{"ast":null,"code":"var _jsxFileName = \"/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/hooks/useNotifications.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, createContext, useContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Create context with default values\nexport const NotificationsContext = /*#__PURE__*/createContext({\n  notifications: [],\n  addNotification: () => {},\n  removeNotification: () => {}\n});\n\n// Provider component\nexport const NotificationsProvider = ({\n  children\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n\n  // Add a new notification\n  const addNotification = (type, message) => {\n    const newNotification = {\n      id: uuidv4(),\n      type,\n      message,\n      timestamp: new Date()\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      removeNotification(newNotification.id);\n    }, 5000);\n  };\n\n  // Remove a notification by ID\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook to use the notifications context\n_s(NotificationsProvider, \"/HH3zTd3BUNOgnlhD79kguSWbWM=\");\n_c = NotificationsProvider;\nexport const useNotifications = () => {\n  _s2();\n  const context = useContext(NotificationsContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationsProvider');\n  }\n  return context;\n};\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default useNotifications;\nvar _c;\n$RefreshReg$(_c, \"NotificationsProvider\");","map":{"version":3,"names":["React","useState","createContext","useContext","v4","uuidv4","jsxDEV","_jsxDEV","NotificationsContext","notifications","addNotification","removeNotification","NotificationsProvider","children","_s","setNotifications","type","message","newNotification","id","timestamp","Date","prev","setTimeout","filter","notification","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotifications","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/hooks/useNotifications.tsx"],"sourcesContent":["import React, { useState, createContext, useContext } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  message: string;\n  timestamp: Date;\n}\n\ninterface NotificationsContextType {\n  notifications: Notification[];\n  addNotification: (type: 'info' | 'success' | 'warning' | 'error', message: string) => void;\n  removeNotification: (id: string) => void;\n}\n\n// Create context with default values\nexport const NotificationsContext = createContext<NotificationsContextType>({\n  notifications: [],\n  addNotification: () => {},\n  removeNotification: () => {},\n});\n\n// Provider component\nexport const NotificationsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  // Add a new notification\n  const addNotification = (type: 'info' | 'success' | 'warning' | 'error', message: string) => {\n    const newNotification: Notification = {\n      id: uuidv4(),\n      type,\n      message,\n      timestamp: new Date(),\n    };\n    \n    setNotifications(prev => [...prev, newNotification]);\n    \n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      removeNotification(newNotification.id);\n    }, 5000);\n  };\n\n  // Remove a notification by ID\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification,\n  };\n\n  return <NotificationsContext.Provider value={value}>{children}</NotificationsContext.Provider>;\n};\n\n// Custom hook to use the notifications context\nexport const useNotifications = () => {\n  const context = useContext(NotificationsContext);\n  \n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationsProvider');\n  }\n  \n  return context;\n};\n\nexport default useNotifications;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAClE,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAepC;AACA,OAAO,MAAMC,oBAAoB,gBAAGN,aAAa,CAA2B;EAC1EO,aAAa,EAAE,EAAE;EACjBC,eAAe,EAAEA,CAAA,KAAM,CAAC,CAAC;EACzBC,kBAAkB,EAAEA,CAAA,KAAM,CAAC;AAC7B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,qBAA8D,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9F,MAAM,CAACL,aAAa,EAAEM,gBAAgB,CAAC,GAAGd,QAAQ,CAAiB,EAAE,CAAC;;EAEtE;EACA,MAAMS,eAAe,GAAGA,CAACM,IAA8C,EAAEC,OAAe,KAAK;IAC3F,MAAMC,eAA6B,GAAG;MACpCC,EAAE,EAAEd,MAAM,CAAC,CAAC;MACZW,IAAI;MACJC,OAAO;MACPG,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC;IAEDN,gBAAgB,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,eAAe,CAAC,CAAC;;IAEpD;IACAK,UAAU,CAAC,MAAM;MACfZ,kBAAkB,CAACO,eAAe,CAACC,EAAE,CAAC;IACxC,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;;EAED;EACA,MAAMR,kBAAkB,GAAIQ,EAAU,IAAK;IACzCJ,gBAAgB,CAACO,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,YAAY,IAAIA,YAAY,CAACN,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMO,KAAK,GAAG;IACZjB,aAAa;IACbC,eAAe;IACfC;EACF,CAAC;EAED,oBAAOJ,OAAA,CAACC,oBAAoB,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAb,QAAA,EAAEA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAgC,CAAC;AAChG,CAAC;;AAED;AAAAjB,EAAA,CAlCaF,qBAA8D;AAAAoB,EAAA,GAA9DpB,qBAA8D;AAmC3E,OAAO,MAAMqB,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMC,OAAO,GAAGhC,UAAU,CAACK,oBAAoB,CAAC;EAEhD,IAAI2B,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,8DAA8D,CAAC;EACjF;EAEA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,gBAAgB;AAU7B,eAAeA,gBAAgB;AAAC,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}