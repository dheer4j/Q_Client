{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useAuth } from './useAuth';\nexport const useWebSocket = url => {\n  _s();\n  const [lastMessage, setLastMessage] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting');\n  const webSocketRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const {\n    user\n  } = useAuth();\n\n  // Function to establish WebSocket connection\n  const connect = useCallback(() => {\n    // Close any existing connection\n    if (webSocketRef.current) {\n      webSocketRef.current.close();\n    }\n\n    // Clear any pending reconnect timeout\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    try {\n      setConnectionStatus('Connecting');\n      const ws = new WebSocket(url);\n      ws.onopen = () => {\n        console.log('WebSocket connection established');\n        setConnectionStatus('Connected');\n\n        // Send user online message if user is authenticated\n        if (user !== null && user !== void 0 && user.id) {\n          const userOnlineMessage = {\n            message_type: 'user_online',\n            sender_id: user.id,\n            payload: {\n              username: user.username\n            },\n            timestamp: new Date().toISOString()\n          };\n          ws.send(JSON.stringify(userOnlineMessage));\n        }\n      };\n      ws.onmessage = event => {\n        console.log('WebSocket message received:', event.data);\n        setLastMessage(event.data);\n      };\n      ws.onerror = error => {\n        console.error('WebSocket error:', error);\n        setConnectionStatus('Disconnected');\n      };\n      ws.onclose = event => {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n        setConnectionStatus('Disconnected');\n\n        // Attempt to reconnect after a delay\n        reconnectTimeoutRef.current = window.setTimeout(() => {\n          console.log('Attempting to reconnect WebSocket...');\n          connect();\n        }, 5000); // Reconnect after 5 seconds\n      };\n      webSocketRef.current = ws;\n    } catch (error) {\n      console.error('Failed to establish WebSocket connection:', error);\n      setConnectionStatus('Disconnected');\n\n      // Attempt to reconnect after a delay\n      reconnectTimeoutRef.current = window.setTimeout(() => {\n        console.log('Attempting to reconnect WebSocket...');\n        connect();\n      }, 5000); // Reconnect after 5 seconds\n    }\n  }, [url, user]);\n\n  // Connect to WebSocket when component mounts or URL changes\n  useEffect(() => {\n    if (url) {\n      connect();\n    }\n\n    // Cleanup function to close WebSocket connection when component unmounts\n    return () => {\n      if (webSocketRef.current) {\n        webSocketRef.current.close();\n      }\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [url, connect]);\n\n  // Function to send a message through the WebSocket\n  const sendMessage = useCallback(message => {\n    if (webSocketRef.current && webSocketRef.current.readyState === WebSocket.OPEN) {\n      webSocketRef.current.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }, []);\n  return {\n    lastMessage,\n    sendMessage,\n    connectionStatus,\n    reconnect: connect\n  };\n};\n_s(useWebSocket, \"PqY8aiT0hTvIZSbkC3wDQfRbpFk=\", false, function () {\n  return [useAuth];\n});\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useAuth","useWebSocket","url","_s","lastMessage","setLastMessage","connectionStatus","setConnectionStatus","webSocketRef","reconnectTimeoutRef","user","connect","current","close","clearTimeout","ws","WebSocket","onopen","console","log","id","userOnlineMessage","message_type","sender_id","payload","username","timestamp","Date","toISOString","send","JSON","stringify","onmessage","event","data","onerror","error","onclose","code","reason","window","setTimeout","sendMessage","message","readyState","OPEN","reconnect"],"sources":["/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport { useAuth } from './useAuth';\n\ntype ConnectionStatus = 'Connecting' | 'Connected' | 'Disconnected';\n\ninterface WebSocketMessage {\n  message_type: 'new_email' | 'email_read' | 'typing_indicator' | 'user_online' | 'user_offline' | 'encryption_status' | 'key_rotation' | 'error';\n  sender_id?: string;\n  recipient_id?: string;\n  payload: any;\n  timestamp: string;\n}\n\nexport const useWebSocket = (url: string) => {\n  const [lastMessage, setLastMessage] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('Connecting');\n  const webSocketRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<number | null>(null);\n  const { user } = useAuth();\n\n  // Function to establish WebSocket connection\n  const connect = useCallback(() => {\n    // Close any existing connection\n    if (webSocketRef.current) {\n      webSocketRef.current.close();\n    }\n\n    // Clear any pending reconnect timeout\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n\n    try {\n      setConnectionStatus('Connecting');\n      const ws = new WebSocket(url);\n\n      ws.onopen = () => {\n        console.log('WebSocket connection established');\n        setConnectionStatus('Connected');\n\n        // Send user online message if user is authenticated\n        if (user?.id) {\n          const userOnlineMessage: WebSocketMessage = {\n            message_type: 'user_online',\n            sender_id: user.id,\n            payload: { username: user.username },\n            timestamp: new Date().toISOString()\n          };\n          ws.send(JSON.stringify(userOnlineMessage));\n        }\n      };\n\n      ws.onmessage = (event) => {\n        console.log('WebSocket message received:', event.data);\n        setLastMessage(event.data);\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionStatus('Disconnected');\n      };\n\n      ws.onclose = (event) => {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n        setConnectionStatus('Disconnected');\n\n        // Attempt to reconnect after a delay\n        reconnectTimeoutRef.current = window.setTimeout(() => {\n          console.log('Attempting to reconnect WebSocket...');\n          connect();\n        }, 5000); // Reconnect after 5 seconds\n      };\n\n      webSocketRef.current = ws;\n    } catch (error) {\n      console.error('Failed to establish WebSocket connection:', error);\n      setConnectionStatus('Disconnected');\n\n      // Attempt to reconnect after a delay\n      reconnectTimeoutRef.current = window.setTimeout(() => {\n        console.log('Attempting to reconnect WebSocket...');\n        connect();\n      }, 5000); // Reconnect after 5 seconds\n    }\n  }, [url, user]);\n\n  // Connect to WebSocket when component mounts or URL changes\n  useEffect(() => {\n    if (url) {\n      connect();\n    }\n\n    // Cleanup function to close WebSocket connection when component unmounts\n    return () => {\n      if (webSocketRef.current) {\n        webSocketRef.current.close();\n      }\n\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [url, connect]);\n\n  // Function to send a message through the WebSocket\n  const sendMessage = useCallback((message: WebSocketMessage) => {\n    if (webSocketRef.current && webSocketRef.current.readyState === WebSocket.OPEN) {\n      webSocketRef.current.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }, []);\n\n  return {\n    lastMessage,\n    sendMessage,\n    connectionStatus,\n    reconnect: connect\n  };\n};\n\nexport default useWebSocket;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}