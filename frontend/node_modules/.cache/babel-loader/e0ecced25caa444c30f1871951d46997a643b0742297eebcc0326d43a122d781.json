{"ast":null,"code":"/**\n * Utility functions for handling WebSocket communication\n */\n\n// Types for WebSocket messages\n\n// Create a new email message\nexport const createNewEmailMessage = (senderId, recipientId, emailData) => {\n  return {\n    message_type: 'new_email',\n    sender_id: senderId,\n    recipient_id: recipientId,\n    payload: emailData,\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create an email read message\nexport const createEmailReadMessage = (senderId, emailId) => {\n  return {\n    message_type: 'email_read',\n    sender_id: senderId,\n    payload: {\n      email_id: emailId\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a typing indicator message\nexport const createTypingIndicatorMessage = (senderId, recipientId, isTyping) => {\n  return {\n    message_type: 'typing_indicator',\n    sender_id: senderId,\n    recipient_id: recipientId,\n    payload: {\n      is_typing: isTyping\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a user online message\nexport const createUserOnlineMessage = (userId, username) => {\n  return {\n    message_type: 'user_online',\n    sender_id: userId,\n    payload: {\n      username\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a user offline message\nexport const createUserOfflineMessage = userId => {\n  return {\n    message_type: 'user_offline',\n    sender_id: userId,\n    payload: {},\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create an encryption status message\nexport const createEncryptionStatusMessage = (userId, status, details) => {\n  return {\n    message_type: 'encryption_status',\n    sender_id: userId,\n    payload: {\n      status,\n      details\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a key rotation message\nexport const createKeyRotationMessage = (userId, keyId) => {\n  return {\n    message_type: 'key_rotation',\n    sender_id: userId,\n    payload: {\n      key_id: keyId\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create an error message\nexport const createErrorMessage = errorMessage => {\n  return {\n    message_type: 'error',\n    payload: {\n      message: errorMessage\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Parse a WebSocket message\nexport const parseWebSocketMessage = messageData => {\n  try {\n    return JSON.parse(messageData);\n  } catch (error) {\n    console.error('Failed to parse WebSocket message:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["createNewEmailMessage","senderId","recipientId","emailData","message_type","sender_id","recipient_id","payload","timestamp","Date","toISOString","createEmailReadMessage","emailId","email_id","createTypingIndicatorMessage","isTyping","is_typing","createUserOnlineMessage","userId","username","createUserOfflineMessage","createEncryptionStatusMessage","status","details","createKeyRotationMessage","keyId","key_id","createErrorMessage","errorMessage","message","parseWebSocketMessage","messageData","JSON","parse","error","console"],"sources":["/Users/siddu/IdeaProjects/Q_client/quantum_email_client/frontend/src/utils/webSocketUtils.ts"],"sourcesContent":["/**\n * Utility functions for handling WebSocket communication\n */\n\n// Types for WebSocket messages\nexport interface WebSocketMessage {\n  message_type: WebSocketMessageType;\n  sender_id?: string;\n  recipient_id?: string;\n  payload: any;\n  timestamp: string;\n}\n\nexport type WebSocketMessageType = \n  | 'new_email'\n  | 'email_read'\n  | 'typing_indicator'\n  | 'user_online'\n  | 'user_offline'\n  | 'encryption_status'\n  | 'key_rotation'\n  | 'error';\n\n// Create a new email message\nexport const createNewEmailMessage = (senderId: string, recipientId: string, emailData: any): WebSocketMessage => {\n  return {\n    message_type: 'new_email',\n    sender_id: senderId,\n    recipient_id: recipientId,\n    payload: emailData,\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create an email read message\nexport const createEmailReadMessage = (senderId: string, emailId: string): WebSocketMessage => {\n  return {\n    message_type: 'email_read',\n    sender_id: senderId,\n    payload: { email_id: emailId },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a typing indicator message\nexport const createTypingIndicatorMessage = (senderId: string, recipientId: string, isTyping: boolean): WebSocketMessage => {\n  return {\n    message_type: 'typing_indicator',\n    sender_id: senderId,\n    recipient_id: recipientId,\n    payload: { is_typing: isTyping },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a user online message\nexport const createUserOnlineMessage = (userId: string, username: string): WebSocketMessage => {\n  return {\n    message_type: 'user_online',\n    sender_id: userId,\n    payload: { username },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a user offline message\nexport const createUserOfflineMessage = (userId: string): WebSocketMessage => {\n  return {\n    message_type: 'user_offline',\n    sender_id: userId,\n    payload: {},\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create an encryption status message\nexport const createEncryptionStatusMessage = (userId: string, status: string, details: any): WebSocketMessage => {\n  return {\n    message_type: 'encryption_status',\n    sender_id: userId,\n    payload: {\n      status,\n      details\n    },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create a key rotation message\nexport const createKeyRotationMessage = (userId: string, keyId: string): WebSocketMessage => {\n  return {\n    message_type: 'key_rotation',\n    sender_id: userId,\n    payload: { key_id: keyId },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Create an error message\nexport const createErrorMessage = (errorMessage: string): WebSocketMessage => {\n  return {\n    message_type: 'error',\n    payload: { message: errorMessage },\n    timestamp: new Date().toISOString()\n  };\n};\n\n// Parse a WebSocket message\nexport const parseWebSocketMessage = (messageData: string): WebSocketMessage | null => {\n  try {\n    return JSON.parse(messageData) as WebSocketMessage;\n  } catch (error) {\n    console.error('Failed to parse WebSocket message:', error);\n    return null;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAmBA;AACA,OAAO,MAAMA,qBAAqB,GAAGA,CAACC,QAAgB,EAAEC,WAAmB,EAAEC,SAAc,KAAuB;EAChH,OAAO;IACLC,YAAY,EAAE,WAAW;IACzBC,SAAS,EAAEJ,QAAQ;IACnBK,YAAY,EAAEJ,WAAW;IACzBK,OAAO,EAAEJ,SAAS;IAClBK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,sBAAsB,GAAGA,CAACV,QAAgB,EAAEW,OAAe,KAAuB;EAC7F,OAAO;IACLR,YAAY,EAAE,YAAY;IAC1BC,SAAS,EAAEJ,QAAQ;IACnBM,OAAO,EAAE;MAAEM,QAAQ,EAAED;IAAQ,CAAC;IAC9BJ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMI,4BAA4B,GAAGA,CAACb,QAAgB,EAAEC,WAAmB,EAAEa,QAAiB,KAAuB;EAC1H,OAAO;IACLX,YAAY,EAAE,kBAAkB;IAChCC,SAAS,EAAEJ,QAAQ;IACnBK,YAAY,EAAEJ,WAAW;IACzBK,OAAO,EAAE;MAAES,SAAS,EAAED;IAAS,CAAC;IAChCP,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMO,uBAAuB,GAAGA,CAACC,MAAc,EAAEC,QAAgB,KAAuB;EAC7F,OAAO;IACLf,YAAY,EAAE,aAAa;IAC3BC,SAAS,EAAEa,MAAM;IACjBX,OAAO,EAAE;MAAEY;IAAS,CAAC;IACrBX,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMU,wBAAwB,GAAIF,MAAc,IAAuB;EAC5E,OAAO;IACLd,YAAY,EAAE,cAAc;IAC5BC,SAAS,EAAEa,MAAM;IACjBX,OAAO,EAAE,CAAC,CAAC;IACXC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMW,6BAA6B,GAAGA,CAACH,MAAc,EAAEI,MAAc,EAAEC,OAAY,KAAuB;EAC/G,OAAO;IACLnB,YAAY,EAAE,mBAAmB;IACjCC,SAAS,EAAEa,MAAM;IACjBX,OAAO,EAAE;MACPe,MAAM;MACNC;IACF,CAAC;IACDf,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMc,wBAAwB,GAAGA,CAACN,MAAc,EAAEO,KAAa,KAAuB;EAC3F,OAAO;IACLrB,YAAY,EAAE,cAAc;IAC5BC,SAAS,EAAEa,MAAM;IACjBX,OAAO,EAAE;MAAEmB,MAAM,EAAED;IAAM,CAAC;IAC1BjB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMiB,kBAAkB,GAAIC,YAAoB,IAAuB;EAC5E,OAAO;IACLxB,YAAY,EAAE,OAAO;IACrBG,OAAO,EAAE;MAAEsB,OAAO,EAAED;IAAa,CAAC;IAClCpB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMoB,qBAAqB,GAAIC,WAAmB,IAA8B;EACrF,IAAI;IACF,OAAOC,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}